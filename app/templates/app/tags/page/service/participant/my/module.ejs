<layout-default>
	
	<h2 class="subtitle1" if={ value (my ('module_order'), '.done') (assemble (my ('course', '.course .module_set')))  }
		><strike>{ value (my ('module_order'), '.name') (assemble (my ('course', '.course .module_set'))) }</strike
	></h2>
	<h2 class="subtitle1" if={ ! value (my ('module_order'), '.done') (assemble (my ('course', '.course .module_set'))) }
		>{ value (my ('module_order'), '.name') (assemble (my ('course', '.course .module_set'))) }</h2
	>
	
	<table class="table">
		<tr><th>Components</th><th></th></tr>
		<tr each={ assemble (value (my ('module_order'), '.component_set') (assemble (my ('course', '.course .module_set')))) }
			><td
				><a href="#service/participant/my/component/#{ my ('course_id') }/{ my ('module_order') }/{ order }" if={ done } ><strike>{ name }</strike></a
				><a href="#service/participant/my/component/#{ my ('course_id') }/{ my ('module_order') }/{ order }" if={ ! done } >{ name }</a
			></td
		></tr>
	</table>
	
</layout-default>

<script>
(function (self) {
	remembers ({
		course: undefined,
		course_id: undefined,
		module_order: undefined
	}) (self);
	most .mergeArray ([
		most .fromEvent ('course', self),
		most .fromEvent ('course_id', self),
		most .fromEvent ('module_order', self)
	]) .observe (function () {
		self .update ();
	});
	
	
	
	
	self .remembers ('input');
	self .on ('input', function (args) {
		var course_id = args [0];
		var module_order = args [1];
		
		
		most .periodic (500)
			.until (lifecycle (self))
			.thru (content .course (course_id))
			.tap (display_errors)
			.observe (function (course) {
				self .emit ('course', course);
			});
		
		self .emit ('course_id', course_id);
		self .emit ('module_order', module_order);
	});
})(this);
</script>

