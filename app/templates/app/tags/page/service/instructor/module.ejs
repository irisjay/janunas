<layout-default>
	
	<h1 class="title">{ value (my ('module_order'), '.name') (assemble (my ('course', '.course .module_set'))) }</h1>

	<table class="table">
		<tr><th>Components</th><th/><th/></tr>
		<tr each={ assemble(value (my ('module_order'), '.component_set') (assemble (my ('course', '.course .module_set')))) }
			><td><a href="#service/instructor/component/#{ recalls ('course_id') }/{ recalls ('module_order') }/{ order }">{ name }</a></td
			><td><button class="localbutton button is-outlined is-info" order={ order } <%- ref ('delete_component') %> >x</button></td
			><td><button class="localbutton button is-outlined is-info" order={ order } onclick={ emit.bind(self,'fk',+order) } >shift down</button></td
		></tr>
	</table>
	
	<a class="localbutton button is-outlined is-info" type="submit" href="{ '#service/instructor/component/add/#' + self .my ('course_id') + '/' + self .my ('module_order') }" >
		Add component
	</a>

</layout-default>

<script>
	(function (self) {
		remembers ({
			course: undefined,
			course_id: undefined,
			module_order: undefined
		}) (self);
		most .mergeArray ([
			most .fromEvent ('course', self),
			most .fromEvent ('course_id', self),
			most .fromEvent ('module_order', self)
		]) .observe (function () {
			self .update ();
		});
		
		
		connects ({
			add_component: each_ref ('add_component'),
			delete_component: each_ref ('delete_component'),
			shift_component: each_ref ('shift_component')
		}) (self);
		self .on ('delete_component', function (delete_component) {
			delete_component .addEventListener ('click', function () {
				var order = delete_component .getAttribute ('order');
				self .emit ('delete', {
					component_order: +order
				});
			});
		});
		
		self .remembers ('fk');
		self .on ('fk', function (order) {
			self .emit ('reorder', {
				component_1_order: +order,
				component_2_order: (+order + 1) % assemble (value (self .my ('module_order'), '.component_set') (assemble (self .my ('course', '.course .module_set')))) .length
			});
		});
		
		
		remembers ({
			delete: undefined,
			reorder: undefined
		}) (self);
		most .mergeArray ([
			most .fromEvent ('delete', self),
			most .fromEvent ('reorder', self)
		]) .observe (display_errors);
		
		
		
		self .remembers ('input');
		self .on ('input', function (args) {
			var course_id = args [0];
			var module_order = args [1];
			
			most .periodic (300)
				.thru (content .course (course_id))
				.skipRepeatsWith (json_equal)
				.tap (display_errors)
				.observe (function (course) {
					self .emit ('course', course);
				});
			self .emit ('course_id', course_id);
			self .emit ('module_order', module_order);
				
			connects ({
				delete: util .component_delete (course_id, module_order),
				reorder: util .component_reorder (course_id, module_order)
			}) (self);
		});
	})(this);
</script>

