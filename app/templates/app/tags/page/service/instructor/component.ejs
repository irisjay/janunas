<layout-default>
	
	<h1 class="title">{
								value (my ('component_order'), '.name') (
									assemble (
										value (my ('module_order'), '.component_set') (
											logged(assemble (my ('course', '.course .module_set')))
										)
									)
								)
	}</h1>
	<h2 class="subtitle1">{
								value (my ('component_order'), '.content') (
									assemble (
										value (my ('module_order'), '.component_set') (
											assemble (my ('course', '.course .module_set'))
										)
									)
								)
	}</h2>
	<span each={ url, key in
							((parse ((value (my ('component_order'), '.files') (
								assemble (
									value (my ('module_order'), '.component_set') (
										assemble (my ('course', '.course .module_set'))
									)
								)
							))) || [] ).filter) (is_picture)
	}
		><img src={ url } >
	<br></span>
	<span each={ url, key in
							((parse ((value (my ('component_order'), '.files') (
								assemble (
									value (my ('module_order'), '.component_set') (
										assemble (my ('course', '.course .module_set'))
									)
								)
							))) || [] ).filter) (not_picture)
	}
		><a href={ url } >{ filename (url) }</a
	><br></span>
	<span each={ video, key in
							((parse ((value (my ('component_order'), '.videos') (
								assemble (
									value (my ('module_order'), '.component_set') (
										assemble (my ('course', '.course .module_set'))
									)
								)
							))) || [] ))
	}
		><iframe width="420" height="315"
			src="https://www.youtube.com/embed/{ video }">
	</iframe><br></span>
	
	<component-uploader destination="longeradlfkjas" return__from="file" />
	
	<input type="text" placeholder="Video">
	<button to="add" onclick={ emit .bind (self, 'video') }>Add Youtube URL</button>
	
</layout-default>

<script>
	(function (self) {
		self .remembers ('course');
		self .remembers ('module_order');
		self .remembers ('component_order');
		self .on ('course', function () { self .update (); });
		self .on ('module_order', function () { self .update (); });
		self .on ('component_order', function () { self .update (); });
	
	
	
		self .remembers ('input');
		self .on ('input', function (args) {
			var course_id = args [0];
			var module_order = args [1];
			var component_order = args [2];
	
			self .emit ('module_order', module_order);
			self .emit ('component_order', component_order);
	
			most .just ()
				.thru (content .course (course_id) )
				.observe (function (course) {
					self .emit ('course', course);
				});
				
					self .emit ('course', content .course (course_id).filter.__outgoing_memory_filter());
				
var youtube_parser =function (url){
    var regExp = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#\&\?]*).*/;
    var match = url.match(regExp);
    return (match&&match[7].length==11)? match[7] : false;
};
			self .remembers ('video')
			most .fromEvent ('video', self)
				.take (1)
				.map (function () {
					return	{
								component_name: value (self .my ('component_order'), '.name') (
													assemble (
														value (self .my ('module_order'), '.component_set') (
															assemble (self .my ('course', '.course .module_set'))
														)
													)
												),
								component_content:	value (self .my ('component_order'), '.content') (
														assemble (
															value (self .my ('module_order'), '.component_set') (
																assemble (self .my ('course', '.course .module_set'))
															)
														)
													),
								component_files:	value (self .my ('component_order'), '.files') (
														assemble (
															value (self .my ('module_order'), '.component_set') (
																assemble (self .my ('course', '.course .module_set'))
															)
														)
													),
								component_videos:	JSON .stringify (array_push (youtube_parser(self .root .querySelector('input[type="text"]') .value)) (
														parse (value (self .my ('component_order'), '.videos') (
														assemble (
															value (self .my ('module_order'), '.component_set') (
																assemble (self .my ('course', '.course .module_set'))
															)
														)
													)))),
								
							};
				})
				.thru (util .component_edit (course_id, module_order, component_order))
				.tap (display_errors)
				.observe (function (x) {
					setTimeout (rehash, 1500);
				});
			
				
			self .remembers ('file');
			most .fromEvent ('file', self)
				.take (1)
				.map (function (url) {
					return	{
								component_name: value (self .my ('component_order'), '.name') (
													assemble (
														value (self .my ('module_order'), '.component_set') (
															assemble (self .my ('course', '.course .module_set'))
														)
													)
												),
								component_content:	value (self .my ('component_order'), '.content') (
														assemble (
															value (self .my ('module_order'), '.component_set') (
																assemble (self .my ('course', '.course .module_set'))
															)
														)
													),
								component_files:	JSON .stringify (array_push (url) (
														parse (value (self .my ('component_order'), '.files') (
															assemble (
																value (self .my ('module_order'), '.component_set') (
																	assemble (self .my ('course', '.course .module_set'))
																)
															)
														))
													)),
								component_videos:	value (self .my ('component_order'), '.videos') (
														assemble (
															value (self .my ('module_order'), '.component_set') (
																assemble (self .my ('course', '.course .module_set'))
															)
														)
													),
								
							};
				})
				.thru (util .component_edit (course_id, module_order, component_order))
				.tap (display_errors)
				.observe (function (x) {
					rehash ();
				});
		});
	})(this);
</script>

