<layout-default>
	
	<title>Administrator Services</title>
    
	<div id="wrap">
	    <h1>
            Welcome administrator!
        </h1>
		<div id="content">
			<h2 style="margin:20px"> Administrator Services </h2>
			<p style="margin:20px">Please select your desired action.</p>
				<table style="margin:20px">
		<tr><th>All Users</th><th></th><th></th></tr>
		<tr each={ id, user in piece (my ('all_users', '.users')) }
			><td if={ user .instructor & user .administrator }><mark><strong>{ user .username }</strong></mark></td
			><td if={ ! user .instructor & user .administrator }><mark>{ user .username }</mark></td
			><td if={ user .instructor & ! user .administrator }><strong>{ user .username }</strong></td
			><td if={ ! user .administrator && ! user .instructor }>{ user .username }</td
			><td if={ ! user .administrator }><button type="submit" user={ user .id } <%- ref ('make_administrator') %> >Make Admin</button></td
			><td if={ user .administrator }><button user={ user .id } <%- ref ('revoke_administrator') %> >Revoke Admin</button></td
			><td if={ ! user .instructor }><button type="submit" user={ user .id } <%- ref ('make_instructor') %> >Make Instructor</button></td
			><td if={ user .instructor }><button user={ user .id } <%- ref ('unmake_instructor') %> >Unmake Instructor</button></td
		></tr>
	</table>

			
		</div>
		<div style="clear: both;"> </div>
	</div>
	
</layout-default>

<script>
(function (self) {
	
    most .periodic (500)
    	.thru (content .users)
    	.tap (display_errors)
    	.observe (function (users) {
    		self .emit ('all_users', users);
    	});
    	
	
	remembers ({
		'all_users': undefined
	});
	self .on ('all_users', function () {
		self .update ();
	});

	
	connects ({
		make_administrator: each_ref ('make_administrator'),
		revoke_administrator: each_ref ('revoke_administrator'),
		make_instructor: each_ref ('make_instructor'),
		unmake_instructor: each_ref ('unmake_instructor')
	}) (self);
	self .on ('make_administrator', function (make_administrator) {
		var user = make_administrator .getAttribute ('user');
		
		most .fromEvent ('click', make_administrator)
			.map (function () {
				return	{
							edit_type: 'administrator-add',
							edit_content: 'add'
						};
			}) .map (util .user_edit (user))
			.observe (display_errors);
	});
	self .on ('revoke_administrator', function (revoke_administrator) {
		var user = revoke_administrator .getAttribute ('user');
		
		most .fromEvent ('click', revoke_administrator)
			.map (function () {
				return	{
							edit_type: 'administrator-remove',
							edit_content: 'remove'
						};
			}) .map (util .user_edit (user))
			.observe (display_errors);
	});
	self .on ('make_instructor', function (make_instructor) {
		var user = make_instructor .getAttribute ('user');
		
		most .fromEvent ('click', make_instructor)
			.map (function () {
				return	{
							edit_type: 'instructor-add',
							edit_content: 'add'
						};
			}) .map (util .user_edit (user))
			.observe (display_errors);
	});
	self .on ('unmake_instructor', function (unmake_instructor) {
		var user = unmake_instructor .getAttribute ('user');
		
		most .fromEvent ('click', unmake_instructor)
			.map (function () {
				return	{
							edit_type: 'instructor-remove',
							edit_content: 'remove'
						};
			}) .map (util .user_edit (user))
			.observe (display_errors);
	});
})(this);
</script>

