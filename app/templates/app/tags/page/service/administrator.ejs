<layout-default>
	<img class="admin-image" src="https://cdn1.iconfinder.com/data/icons/client-management/512/key-512.png" alt="Exercise control over the system.">
	<h1 class="title">Administrator Services</h1>
	<h2 class="subtitle1">Please select what you desire to do.</h2>	
	
	<table class="table">
		<tr><th>All Users</th><th></th><th></th></tr>
		<tr each={ user, piece in piece (my ('all_users', '.users')) }
			><td if={ user .instructor & user .administrator }><mark><strong>{ user .username }</strong></mark></td
			><td if={ ! user .instructor & user .administrator }><mark>{ user .username }</mark></td
			><td if={ user .instructor & ! user .administrator }><strong>{ user .username }</strong></td
			><td if={ ! user .administrator && ! user .instructor }>{ user .username }</td
			><td if={ ! user .administrator }><button class="localbutton1 button is-outlined is-info" type="submit" user={ user .id } ref="make_administrator" >Make Admin</button></td
			><td if={ user .administrator }><button class="localbutton1 button is-outlined is-info" user={ user .id } ref="revoke_administrator" >Revoke Admin</button></td
			><td if={ ! user .instructor }><button class="localbutton1 button is-outlined is-info" type="submit" user={ user .id } ref="make_instructor" >Make Instructor</button></td
			><td if={ user .instructor }><button class="localbutton1 button is-outlined is-info" user={ user .id } ref="unmake_instructor" >Unmake Instructor</button></td
		></tr>
	</table>
</layout-default>

<style>
	:scope .localbutton1 {
        color: <%- company_color%> !important;
        border-color: <%- company_color%> !important;
        border-radius: 0px 0px 0px 0px !important;
        display: inline;
        width: 150px;
    }
    :scope .localbutton1:hover {
        color: #ffffff !important;
        background: <%- company_color%> !important;
    }
    
    .admin-image {
    	height: 300px;
    	position: relative;
    	left: 30%;
    }
</style>

<script>
	(function (self) {
	
		//App to View
		self .records ({
			all_users: undefined
		}) .on ('all_users', function () {
			self .update ();
		})
		self .consume (
			most .periodic (500)
				.until (lifecycle (self))
				.thru (content .users)
				.skipRepeatsWith (json_equal)
				.tap (display_errors),
			function (users) {
				self .emit ('all_users', users)
			})
		);
	
		//View to App
		self .processes ({
			make_administrator: ref,
			revoke_administrator: ref,
			make_instructor: ref,
			unmake_instructor: ref
		}) .on ('make_administrator', function (ref) {
			var user = ref .getAttribute ('user');
			
			ref .consume (	
				most .fromEvent ('click', ref)
					.map (function () {
						return	{
									edit_type: 'administrator-add',
									edit_content: 'add'
								};
					}) .thru (util .user_edit (user)),
				display_errors
			);
		}) .on ('revoke_administrator', function (ref) {
			var user = ref .getAttribute ('user');
			
			ref .consume (	
				most .fromEvent ('click', ref)
					.map (function () {
						return	{
									edit_type: 'administrator-remove',
									edit_content: 'remove'
								};
					}) .thru (util .user_edit (user)),
				display_errors
			);
		}) .on ('make_instructor', function (ref) {
			var user = ref .getAttribute ('user');
			
			ref .consume (	
				most .fromEvent ('click', ref)
					.map (function () {
						return	{
									edit_type: 'instructor-add',
									edit_content: 'add'
								};
					}) .thru (util .user_edit (user)),
				display_errors
			);
		}) .on ('unmake_instructor', function (ref) {
			var user = ref .getAttribute ('user');
			
			ref .consume (	
				most .fromEvent ('click', ref)
					.map (function () {
						return	{
									edit_type: 'instructor-remove',
									edit_content: 'remove'
								};
					}) .thru (util .user_edit (user)),
				display_errors
			);
		});
	}) (this);
</script>